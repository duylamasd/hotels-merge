// Code generated by MockGen. DO NOT EDIT.
// Source: ./sqlc (interfaces: Querier)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_querier.go -package=mocks ./sqlc Querier
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sqlc "github.com/duylamasd/hotels-merge/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// FindHotelByHotelID mocks base method.
func (m *MockQuerier) FindHotelByHotelID(ctx context.Context, hotelID string) (*sqlc.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHotelByHotelID", ctx, hotelID)
	ret0, _ := ret[0].(*sqlc.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHotelByHotelID indicates an expected call of FindHotelByHotelID.
func (mr *MockQuerierMockRecorder) FindHotelByHotelID(ctx, hotelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHotelByHotelID", reflect.TypeOf((*MockQuerier)(nil).FindHotelByHotelID), ctx, hotelID)
}

// FindHotelsByDestinationAndHotelIDs mocks base method.
func (m *MockQuerier) FindHotelsByDestinationAndHotelIDs(ctx context.Context, arg sqlc.FindHotelsByDestinationAndHotelIDsParams) ([]*sqlc.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHotelsByDestinationAndHotelIDs", ctx, arg)
	ret0, _ := ret[0].([]*sqlc.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHotelsByDestinationAndHotelIDs indicates an expected call of FindHotelsByDestinationAndHotelIDs.
func (mr *MockQuerierMockRecorder) FindHotelsByDestinationAndHotelIDs(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHotelsByDestinationAndHotelIDs", reflect.TypeOf((*MockQuerier)(nil).FindHotelsByDestinationAndHotelIDs), ctx, arg)
}

// FindHotelsByDestinationID mocks base method.
func (m *MockQuerier) FindHotelsByDestinationID(ctx context.Context, destinationID string) ([]*sqlc.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHotelsByDestinationID", ctx, destinationID)
	ret0, _ := ret[0].([]*sqlc.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHotelsByDestinationID indicates an expected call of FindHotelsByDestinationID.
func (mr *MockQuerierMockRecorder) FindHotelsByDestinationID(ctx, destinationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHotelsByDestinationID", reflect.TypeOf((*MockQuerier)(nil).FindHotelsByDestinationID), ctx, destinationID)
}

// FindHotelsByHotelIDs mocks base method.
func (m *MockQuerier) FindHotelsByHotelIDs(ctx context.Context, hotelIds []string) ([]*sqlc.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHotelsByHotelIDs", ctx, hotelIds)
	ret0, _ := ret[0].([]*sqlc.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHotelsByHotelIDs indicates an expected call of FindHotelsByHotelIDs.
func (mr *MockQuerierMockRecorder) FindHotelsByHotelIDs(ctx, hotelIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHotelsByHotelIDs", reflect.TypeOf((*MockQuerier)(nil).FindHotelsByHotelIDs), ctx, hotelIds)
}
