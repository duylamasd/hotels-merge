// Code generated by MockGen. DO NOT EDIT.
// Source: ./domains (interfaces: HotelService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_hotel_service.go -package=mocks ./domains HotelService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sqlc "github.com/duylamasd/hotels-merge/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockHotelService is a mock of HotelService interface.
type MockHotelService struct {
	ctrl     *gomock.Controller
	recorder *MockHotelServiceMockRecorder
	isgomock struct{}
}

// MockHotelServiceMockRecorder is the mock recorder for MockHotelService.
type MockHotelServiceMockRecorder struct {
	mock *MockHotelService
}

// NewMockHotelService creates a new mock instance.
func NewMockHotelService(ctrl *gomock.Controller) *MockHotelService {
	mock := &MockHotelService{ctrl: ctrl}
	mock.recorder = &MockHotelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHotelService) EXPECT() *MockHotelServiceMockRecorder {
	return m.recorder
}

// FindByDestinationAndHotelIDs mocks base method.
func (m *MockHotelService) FindByDestinationAndHotelIDs(ctx context.Context, destinationID string, hotelIDs []string) ([]*sqlc.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByDestinationAndHotelIDs", ctx, destinationID, hotelIDs)
	ret0, _ := ret[0].([]*sqlc.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByDestinationAndHotelIDs indicates an expected call of FindByDestinationAndHotelIDs.
func (mr *MockHotelServiceMockRecorder) FindByDestinationAndHotelIDs(ctx, destinationID, hotelIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDestinationAndHotelIDs", reflect.TypeOf((*MockHotelService)(nil).FindByDestinationAndHotelIDs), ctx, destinationID, hotelIDs)
}

// FindByDestinationID mocks base method.
func (m *MockHotelService) FindByDestinationID(ctx context.Context, destinationID string) ([]*sqlc.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByDestinationID", ctx, destinationID)
	ret0, _ := ret[0].([]*sqlc.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByDestinationID indicates an expected call of FindByDestinationID.
func (mr *MockHotelServiceMockRecorder) FindByDestinationID(ctx, destinationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDestinationID", reflect.TypeOf((*MockHotelService)(nil).FindByDestinationID), ctx, destinationID)
}

// FindByHotelID mocks base method.
func (m *MockHotelService) FindByHotelID(ctx context.Context, hotelID string) (*sqlc.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHotelID", ctx, hotelID)
	ret0, _ := ret[0].(*sqlc.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHotelID indicates an expected call of FindByHotelID.
func (mr *MockHotelServiceMockRecorder) FindByHotelID(ctx, hotelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHotelID", reflect.TypeOf((*MockHotelService)(nil).FindByHotelID), ctx, hotelID)
}

// FindByHotelIDs mocks base method.
func (m *MockHotelService) FindByHotelIDs(ctx context.Context, hotelIDs []string) ([]*sqlc.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHotelIDs", ctx, hotelIDs)
	ret0, _ := ret[0].([]*sqlc.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHotelIDs indicates an expected call of FindByHotelIDs.
func (mr *MockHotelServiceMockRecorder) FindByHotelIDs(ctx, hotelIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHotelIDs", reflect.TypeOf((*MockHotelService)(nil).FindByHotelIDs), ctx, hotelIDs)
}
